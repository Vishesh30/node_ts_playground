[
    {
        "filePath": "/Users/i061910/Git/node_ts_playground/src/Number Calculation/NumberCal.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-var-requires",
                "severity": 2,
                "message": "Require statement not part of import statement.",
                "line": 2,
                "column": 19,
                "nodeType": "CallExpression",
                "messageId": "noVarReqs",
                "endLine": 2,
                "endColumn": 42
            },
            {
                "ruleId": "@typescript-eslint/no-inferrable-types",
                "severity": 2,
                "message": "Type number trivially inferred from a number literal, remove type annotation.",
                "line": 26,
                "column": 7,
                "nodeType": "VariableDeclarator",
                "messageId": "noInferrableType",
                "endLine": 26,
                "endColumn": 25,
                "fix": {
                    "range": [
                        541,
                        549
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "prefer-const",
                "severity": 2,
                "message": "'int1' is never reassigned. Use 'const' instead.",
                "line": 26,
                "column": 7,
                "nodeType": "Identifier",
                "messageId": "useConst",
                "endLine": 26,
                "endColumn": 19,
                "fix": {
                    "range": [
                        533,
                        536
                    ],
                    "text": "const"
                }
            },
            {
                "ruleId": "@typescript-eslint/no-inferrable-types",
                "severity": 2,
                "message": "Type number trivially inferred from a number literal, remove type annotation.",
                "line": 27,
                "column": 7,
                "nodeType": "VariableDeclarator",
                "messageId": "noInferrableType",
                "endLine": 27,
                "endColumn": 25,
                "fix": {
                    "range": [
                        567,
                        575
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "prefer-const",
                "severity": 2,
                "message": "'int2' is never reassigned. Use 'const' instead.",
                "line": 27,
                "column": 7,
                "nodeType": "Identifier",
                "messageId": "useConst",
                "endLine": 27,
                "endColumn": 19,
                "fix": {
                    "range": [
                        559,
                        562
                    ],
                    "text": "const"
                }
            },
            {
                "ruleId": "prefer-const",
                "severity": 2,
                "message": "'res' is never reassigned. Use 'const' instead.",
                "line": 29,
                "column": 7,
                "nodeType": "Identifier",
                "messageId": "useConst",
                "endLine": 29,
                "endColumn": 10,
                "fix": {
                    "range": [
                        586,
                        589
                    ],
                    "text": "const"
                }
            }
        ],
        "errorCount": 6,
        "warningCount": 0,
        "fixableErrorCount": 5,
        "fixableWarningCount": 0,
        "source": "// Normal Number Range supported by JS is +/- 9007199254740991\nconst BigNumber = require(\"bignumber.js\");\nexport function NumberNormalCalculation() {\n  // let int1 : number = 8464682;\n  // let int2 : number = 682;\n\n  // 0.2 + 0.1\n  // 0.30000000000000004\n\n  // 0.3 - 0.1\n  // 0.19999999999999998\n\n  //100.90 - 20.30\n  //80.60000000000001\n\n  //1+0.1+2+0.2\n  //3.30000000000003\n\n  // 1111.11+1111.11+1111.11+1111.11+1111.11\n  // 5555.549999999999\n\n  // Loss of Precision\n  // 99999999999.0123 + 0.00231432423\n  // 99999999999.01462\n\n  let int1: number = 0.1;\n  let int2: number = 0.2;\n\n  let res = `--------- Normal Calculation without library ---------\nAddition 0.1 + 0.2 = --------  ${int1 + int2} \nMultiplication int1 * int2 = --  ${int1 * int2}\nAddition of 1111.11+1111.11+1111.11+1111.11+1111.11 = --------  ${\n    1111.11 + 1111.11 + 1111.11 + 1111.11 + 1111.11\n  } \nSubstraction 0.3 - 0.1 = ----  ${0.3 - 0.1}\nMultiplication 200.30 * 3 = --  ${200.3 * 3}\nSubstraction 100.90 - 20.20 = --------  ${100.9 - 20.3}\n               \n--------- Solution using parseFloat and toFixed ------------------\nAddition 0.1 + 0.2 = --------  ${(\n    parseFloat(\"0.1\") + parseFloat(\"0.2\")\n  ).toFixed(2)} \nMultiplication 0.1 * 0.2 = --  ${(\n    parseFloat(\"0.1\") * parseFloat(\"0.2\")\n  ).toFixed(2)}\nAddition of 1111.11+1111.11+1111.11+1111.11+1111.11 = --------  ${(\n    parseFloat(\"1111.11\") +\n    parseFloat(\"1111.11\") +\n    parseFloat(\"1111.11\") +\n    parseFloat(\"1111.11\") +\n    parseFloat(\"1111.11\")\n  ).toFixed(2)} \nSubstraction 0.3 - 0.1 = ----  ${(\n    parseFloat(\"0.3\") - parseFloat(\"0.1\")\n  ).toFixed(2)}\nMultiplication 200.30 * 3 = --  ${(parseFloat(\"200.30\") * 3).toFixed(2)}\nSubstraction 100.90 - 20.20 = --------  ${(\n    parseFloat(\"100.90\") - parseFloat(\"20.30\")\n  ).toFixed(2)}\n\n--------- Solution using BigNumber ------------------\nAddition 0.1 + 0.2 = --------  ${new BigNumber(0.1).plus(new BigNumber(\"0.2\"))} \nMultiplication 0.1 * 0.2 = --  ${new BigNumber(0.1).multipliedBy(\n    new BigNumber(\"0.2\")\n  )}\nAddition of 1111.11+1111.11+1111.11+1111.11+1111.11 = --------  ${new BigNumber(\n    1111.11\n  )\n    .plus(new BigNumber(1111.11))\n    .plus(new BigNumber(1111.11))\n    .plus(new BigNumber(1111.11))\n    .plus(new BigNumber(1111.11))} \nSubstraction 0.3 - 0.1 = ----  ${new BigNumber(\"0.3\").minus(new BigNumber(0.1))}\nMultiplication 200.30 * 3 = --  ${new BigNumber(200.3).multipliedBy(3)}\nSubstraction 100.90 - 20.20 = --------  ${new BigNumber(100.9).minus(\n    new BigNumber(20.2)\n  )}`;\n  console.log(\"done\");\n  return res;\n}\n"
    },
    {
        "filePath": "/Users/i061910/Git/node_ts_playground/src/githubIntegration/githubint.ts",
        "messages": [
            {
                "ruleId": "no-var",
                "severity": 2,
                "message": "Unexpected var, use let or const instead.",
                "line": 1,
                "column": 1,
                "nodeType": "VariableDeclaration",
                "endLine": 1,
                "endColumn": 36,
                "fix": {
                    "range": [
                        0,
                        3
                    ],
                    "text": "let"
                }
            },
            {
                "ruleId": "@typescript-eslint/no-var-requires",
                "severity": 2,
                "message": "Require statement not part of import statement.",
                "line": 1,
                "column": 14,
                "nodeType": "CallExpression",
                "messageId": "noVarReqs",
                "endLine": 1,
                "endColumn": 35
            },
            {
                "ruleId": "no-var",
                "severity": 2,
                "message": "Unexpected var, use let or const instead.",
                "line": 3,
                "column": 1,
                "nodeType": "VariableDeclaration",
                "endLine": 3,
                "endColumn": 79,
                "fix": {
                    "range": [
                        37,
                        40
                    ],
                    "text": "let"
                }
            },
            {
                "ruleId": "@typescript-eslint/type-annotation-spacing",
                "severity": 2,
                "message": "Unexpected space before the ':'.",
                "line": 5,
                "column": 31,
                "nodeType": "Punctuator",
                "messageId": "unexpectedSpaceBefore",
                "endLine": 5,
                "endColumn": 32,
                "fix": {
                    "range": [
                        146,
                        147
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "no-var",
                "severity": 2,
                "message": "Unexpected var, use let or const instead.",
                "line": 15,
                "column": 5,
                "nodeType": "VariableDeclaration",
                "endLine": 21,
                "endColumn": 9,
                "fix": {
                    "range": [
                        473,
                        476
                    ],
                    "text": "let"
                }
            },
            {
                "ruleId": "no-var",
                "severity": 2,
                "message": "Unexpected var, use let or const instead.",
                "line": 23,
                "column": 6,
                "nodeType": "VariableDeclaration",
                "endLine": 23,
                "endColumn": 28,
                "fix": {
                    "range": [
                        649,
                        652
                    ],
                    "text": "let"
                }
            }
        ],
        "errorCount": 6,
        "warningCount": 0,
        "fixableErrorCount": 5,
        "fixableWarningCount": 0,
        "source": "var github = require('github-api');\n\nvar apiurl = \"https://github.wdf.sap.corp/api/v3/repos/BIG/x4-s4one/branches\";\n\nexport function getBranches() : any {\n    // request.get({\n    //     headers: {'Authorization' : 'token c91216bd3037dcdd5a5f6062dde405f1da170047'},\n    //     url:     apiurl,\n    //     json: true\n    //     }, function(error, response, body){\n    //         if(error) console.log(error)\n    //         else\n    //           return(body);\n    // });\n    var gh = new github({\n        username: 'i061910',\n        password: 'saplabsi061910'\n        /* also acceptable:\n           token: 'MY_OAUTH_TOKEN'\n         */\n     });\n\n     var me = gh.getUser(); // no user specified defaults to the user for whom credentials were provided\n        me.listNotifications(function(err, notifications) {\n        console.log(err);\n        console.log(notifications);\n        });\n}\n"
    },
    {
        "filePath": "/Users/i061910/Git/node_ts_playground/src/makingSoapCall/makeSoapCall.ts",
        "messages": [
            {
                "ruleId": "prefer-const",
                "severity": 2,
                "message": "'soap' is never reassigned. Use 'const' instead.",
                "line": 2,
                "column": 7,
                "nodeType": "Identifier",
                "messageId": "useConst",
                "endLine": 2,
                "endColumn": 11,
                "fix": {
                    "range": [
                        36,
                        39
                    ],
                    "text": "const"
                }
            },
            {
                "ruleId": "@typescript-eslint/no-var-requires",
                "severity": 2,
                "message": "Require statement not part of import statement.",
                "line": 2,
                "column": 14,
                "nodeType": "CallExpression",
                "messageId": "noVarReqs",
                "endLine": 2,
                "endColumn": 29
            },
            {
                "ruleId": "prefer-const",
                "severity": 2,
                "message": "'start' is never reassigned. Use 'const' instead.",
                "line": 21,
                "column": 7,
                "nodeType": "Identifier",
                "messageId": "useConst",
                "endLine": 21,
                "endColumn": 12,
                "fix": {
                    "range": [
                        547,
                        550
                    ],
                    "text": "const"
                }
            },
            {
                "ruleId": "prefer-const",
                "severity": 2,
                "message": "'end' is never reassigned. Use 'const' instead.",
                "line": 25,
                "column": 9,
                "nodeType": "Identifier",
                "messageId": "useConst",
                "endLine": 25,
                "endColumn": 12,
                "fix": {
                    "range": [
                        734,
                        737
                    ],
                    "text": "const"
                }
            },
            {
                "ruleId": "prefer-const",
                "severity": 2,
                "message": "'startsoap' is never reassigned. Use 'const' instead.",
                "line": 35,
                "column": 11,
                "nodeType": "Identifier",
                "messageId": "useConst",
                "endLine": 35,
                "endColumn": 20,
                "fix": {
                    "range": [
                        1083,
                        1086
                    ],
                    "text": "const"
                }
            },
            {
                "ruleId": "prefer-const",
                "severity": 2,
                "message": "'endsoap' is never reassigned. Use 'const' instead.",
                "line": 37,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "useConst",
                "endLine": 37,
                "endColumn": 20,
                "fix": {
                    "range": [
                        1188,
                        1191
                    ],
                    "text": "const"
                }
            },
            {
                "ruleId": "prefer-const",
                "severity": 2,
                "message": "'soap' is never reassigned. Use 'const' instead.",
                "line": 54,
                "column": 7,
                "nodeType": "Identifier",
                "messageId": "useConst",
                "endLine": 54,
                "endColumn": 11,
                "fix": {
                    "range": [
                        1682,
                        1685
                    ],
                    "text": "const"
                }
            },
            {
                "ruleId": "@typescript-eslint/no-var-requires",
                "severity": 2,
                "message": "Require statement not part of import statement.",
                "line": 54,
                "column": 14,
                "nodeType": "CallExpression",
                "messageId": "noVarReqs",
                "endLine": 54,
                "endColumn": 29
            },
            {
                "ruleId": "prefer-const",
                "severity": 2,
                "message": "'client' is never reassigned. Use 'const' instead.",
                "line": 56,
                "column": 7,
                "nodeType": "Identifier",
                "messageId": "useConst",
                "endLine": 56,
                "endColumn": 13,
                "fix": {
                    "range": [
                        1713,
                        1716
                    ],
                    "text": "const"
                }
            },
            {
                "ruleId": "@typescript-eslint/no-use-before-define",
                "severity": 2,
                "message": "'createSoapClient' was used before it was defined.",
                "line": 56,
                "column": 22,
                "nodeType": "Identifier",
                "messageId": "noUseBeforeDefine",
                "endLine": 56,
                "endColumn": 38
            },
            {
                "ruleId": "prefer-const",
                "severity": 2,
                "message": "'result' is never reassigned. Use 'const' instead.",
                "line": 57,
                "column": 7,
                "nodeType": "Identifier",
                "messageId": "useConst",
                "endLine": 57,
                "endColumn": 13,
                "fix": {
                    "range": [
                        1758,
                        1761
                    ],
                    "text": "const"
                }
            },
            {
                "ruleId": "@typescript-eslint/no-use-before-define",
                "severity": 2,
                "message": "'makeSOAPCall' was used before it was defined.",
                "line": 57,
                "column": 22,
                "nodeType": "Identifier",
                "messageId": "noUseBeforeDefine",
                "endLine": 57,
                "endColumn": 34
            },
            {
                "ruleId": "prefer-const",
                "severity": 2,
                "message": "'start' is never reassigned. Use 'const' instead.",
                "line": 65,
                "column": 9,
                "nodeType": "Identifier",
                "messageId": "useConst",
                "endLine": 65,
                "endColumn": 14,
                "fix": {
                    "range": [
                        2055,
                        2058
                    ],
                    "text": "const"
                }
            }
        ],
        "errorCount": 13,
        "warningCount": 0,
        "fixableErrorCount": 9,
        "fixableWarningCount": 0,
        "source": "export function PriceCalcSoap() {\n  let soap = require(\"soap\");\n  const wsdl = \"/Users/i061910/Git/x4-sample/src/wsdl/calcPrice.wsdl\";\n  const args = {\n    CalculatePricesRequest: {\n      Application: 1,\n      CurrencyCode: \"USD\",\n      GrossPricingIndicator: false,\n      PricingDate: \"2019-09-20\",\n      Item: {\n        ID: 10,\n        ProductID: \"MCF-0001\",\n        ProductTypeCode: 1,\n        Quantity: 1,\n        QuantityTypeCode: \"EA\",\n        SupplierID: \"MC2000\",\n      },\n    },\n  };\n  // tslint:disable-next-line: only-arrow-functions\n  let start = new Date().getTime();\n  soap.createClient(wsdl, function (err, client) {\n    // tslint:disable-next-line: only-arrow-functions\n    // tslint:disable-next-line: no-console\n    let end = new Date().getTime();\n    // tslint:disable-next-line: no-console\n    console.log(\"Time to create soapClient from WSDL\" + (end - start));\n    // tslint:disable-next-line: no-console\n    if (err) {\n      console.log(err);\n    } else {\n      client.setSecurity(\n        new soap.BasicAuthSecurity(\"_PRICECALC\", \"Welcome@123\")\n      );\n      let startsoap = new Date().getTime();\n      client.CalculatePrice(args, function (err, result) {\n        let endsoap = new Date().getTime();\n        // tslint:disable-next-line: no-console\n        console.log(\n          \"From Local -----------------------------------\" +\n            JSON.stringify(result)\n        );\n        // tslint:disable-next-line: no-console\n        console.log(\n          \"Time to get the response from BYD system\" + (endsoap - startsoap)\n        );\n        return JSON.stringify(result);\n      });\n    }\n  });\n}\n\nexport async function PriceCalcSoapAsync(): Promise<any> {\n  let soap = require(\"soap\");\n\n  let client = await createSoapClient(soap);\n  let result = await makeSOAPCall(client, soap);\n  console.log(JSON.stringify(result));\n  return JSON.stringify(result);\n}\n\nasync function createSoapClient(soap): Promise<any> {\n  return new Promise((resolve, reject) => {\n    const wsdl = \"/Users/i061910/Git/x4-sample/src/wsdl/calcPrice.wsdl\";\n    let start = new Date().getTime();\n    soap.createClient(wsdl, function (err, client) {\n      resolve(client);\n    });\n  });\n}\n\nasync function makeSOAPCall(client, soap): Promise<any> {\n  return new Promise((resolve, reject) => {\n    const args = {\n      CalculatePricesRequest: {\n        Application: 1,\n        CurrencyCode: \"USD\",\n        GrossPricingIndicator: false,\n        PricingDate: \"2019-09-20\",\n        Item: {\n          ID: 10,\n          ProductID: \"MCF-0001\",\n          ProductTypeCode: 1,\n          Quantity: 1,\n          QuantityTypeCode: \"EA\",\n          SupplierID: \"MC2000\",\n        },\n      },\n    };\n    client.setSecurity(new soap.BasicAuthSecurity(\"_PRICECALC\", \"Welcome@123\"));\n    client.CalculatePrice(args, function (err, result) {\n      resolve(result);\n    });\n  });\n}\n"
    },
    {
        "filePath": "/Users/i061910/Git/node_ts_playground/src/promiseAndAsyncawait/promiseAndAsyncawait.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/type-annotation-spacing",
                "severity": 2,
                "message": "Unexpected space before the ':'.",
                "line": 1,
                "column": 31,
                "nodeType": "Punctuator",
                "messageId": "unexpectedSpaceBefore",
                "endLine": 1,
                "endColumn": 32,
                "fix": {
                    "range": [
                        29,
                        30
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "prefer-const",
                "severity": 2,
                "message": "'myPromise' is never reassigned. Use 'const' instead.",
                "line": 2,
                "column": 9,
                "nodeType": "Identifier",
                "messageId": "useConst",
                "endLine": 2,
                "endColumn": 18,
                "fix": {
                    "range": [
                        42,
                        45
                    ],
                    "text": "const"
                }
            },
            {
                "ruleId": "prefer-const",
                "severity": 2,
                "message": "'savings' is never reassigned. Use 'const' instead.",
                "line": 3,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "useConst",
                "endLine": 3,
                "endColumn": 20,
                "fix": {
                    "range": [
                        106,
                        109
                    ],
                    "text": "const"
                }
            },
            {
                "ruleId": "prefer-const",
                "severity": 2,
                "message": "'priceOfPhone' is never reassigned. Use 'const' instead.",
                "line": 4,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "useConst",
                "endLine": 4,
                "endColumn": 25,
                "fix": {
                    "range": [
                        135,
                        138
                    ],
                    "text": "const"
                }
            },
            {
                "ruleId": "@typescript-eslint/type-annotation-spacing",
                "severity": 2,
                "message": "Unexpected space before the ':'.",
                "line": 22,
                "column": 44,
                "nodeType": "Punctuator",
                "messageId": "unexpectedSpaceBefore",
                "endLine": 22,
                "endColumn": 45,
                "fix": {
                    "range": [
                        676,
                        677
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "prefer-const",
                "severity": 2,
                "message": "'soap' is never reassigned. Use 'const' instead.",
                "line": 23,
                "column": 9,
                "nodeType": "Identifier",
                "messageId": "useConst",
                "endLine": 23,
                "endColumn": 13,
                "fix": {
                    "range": [
                        698,
                        701
                    ],
                    "text": "const"
                }
            },
            {
                "ruleId": "@typescript-eslint/no-var-requires",
                "severity": 2,
                "message": "Require statement not part of import statement.",
                "line": 23,
                "column": 16,
                "nodeType": "CallExpression",
                "messageId": "noVarReqs",
                "endLine": 23,
                "endColumn": 31
            },
            {
                "ruleId": "prefer-const",
                "severity": 2,
                "message": "'client' is never reassigned. Use 'const' instead.",
                "line": 25,
                "column": 9,
                "nodeType": "Identifier",
                "messageId": "useConst",
                "endLine": 25,
                "endColumn": 15,
                "fix": {
                    "range": [
                        731,
                        734
                    ],
                    "text": "const"
                }
            },
            {
                "ruleId": "@typescript-eslint/no-use-before-define",
                "severity": 2,
                "message": "'createSoapClient' was used before it was defined.",
                "line": 25,
                "column": 24,
                "nodeType": "Identifier",
                "messageId": "noUseBeforeDefine",
                "endLine": 25,
                "endColumn": 40
            },
            {
                "ruleId": "prefer-const",
                "severity": 2,
                "message": "'result' is never reassigned. Use 'const' instead.",
                "line": 26,
                "column": 9,
                "nodeType": "Identifier",
                "messageId": "useConst",
                "endLine": 26,
                "endColumn": 15,
                "fix": {
                    "range": [
                        778,
                        781
                    ],
                    "text": "const"
                }
            },
            {
                "ruleId": "@typescript-eslint/no-use-before-define",
                "severity": 2,
                "message": "'makeSOAPCall' was used before it was defined.",
                "line": 26,
                "column": 24,
                "nodeType": "Identifier",
                "messageId": "noUseBeforeDefine",
                "endLine": 26,
                "endColumn": 36
            },
            {
                "ruleId": "@typescript-eslint/type-annotation-spacing",
                "severity": 2,
                "message": "Unexpected space before the ':'.",
                "line": 31,
                "column": 33,
                "nodeType": "Punctuator",
                "messageId": "unexpectedSpaceBefore",
                "endLine": 31,
                "endColumn": 34,
                "fix": {
                    "range": [
                        934,
                        935
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "prefer-const",
                "severity": 2,
                "message": "'start' is never reassigned. Use 'const' instead.",
                "line": 34,
                "column": 13,
                "nodeType": "Identifier",
                "messageId": "useConst",
                "endLine": 34,
                "endColumn": 18,
                "fix": {
                    "range": [
                        1079,
                        1082
                    ],
                    "text": "const"
                }
            }
        ],
        "errorCount": 13,
        "warningCount": 0,
        "fixableErrorCount": 10,
        "fixableWarningCount": 0,
        "source": "export function promiseTest() : any {\n    let myPromise = new Promise(function(resolve, reject) {\n        let savings = 20000;\n        let priceOfPhone = 60000;\n        if (savings > priceOfPhone) {\n          resolve({\n            brand: \"iphone\",\n            model: \"11\"\n          });\n        } else {\n          reject(\"We donot have enough savings. Let us save some more money.\");\n        }\n      });myPromise.then(function(value) {\n        return \"Hurray I got this phone as a gift \" + JSON.stringify(value);\n      });myPromise.catch(function(reason) {\n        return \"I coudn't buy the phone because \" +  reason;\n      });\n  }\n\n\n\nexport async function PriceCalcSoapAsync() : Promise<any> {\n    let soap = require('soap');\n\n    let client = await createSoapClient(soap);\n    let result = await makeSOAPCall(client,soap);\n    console.log(JSON.stringify(result));\n    return JSON.stringify(result);\n}\n\nfunction createSoapClient(soap) : Promise<any> {\n   return new Promise((resolve,reject)=>{\n        const wsdl = '/Users/i061910/Git/x4-sample/src/wsdl/calcPrice.wsdl';\n        let start = (new Date()).getTime();\n        soap.createClient(wsdl, function(err, client) { \n            resolve(client);\n        });\n    })\n}\n\nfunction makeSOAPCall(client,soap): Promise<any> {\n    return new Promise((resolve,reject)=>{\n        const args = {CalculatePricesRequest:{Application:1,CurrencyCode:\"USD\",GrossPricingIndicator:false,PricingDate:\"2019-09-20\",Item:{ID:10,ProductID:\"MCF-0001\",ProductTypeCode:1,Quantity:1,QuantityTypeCode:\"EA\",SupplierID:\"MC2000\"}}};\n        client.setSecurity(new soap.BasicAuthSecurity('_PRICECALC', 'Welcome@123'));\n        client.CalculatePrice(args, function(err, result) { \n            resolve(result);\n        });\n\n    });\n}"
    },
    {
        "filePath": "/Users/i061910/Git/node_ts_playground/src/readingDatafromJsonFile/readDataUsingImport.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/type-annotation-spacing",
                "severity": 2,
                "message": "Unexpected space before the ':'.",
                "line": 4,
                "column": 83,
                "nodeType": "Punctuator",
                "messageId": "unexpectedSpaceBefore",
                "endLine": 4,
                "endColumn": 84,
                "fix": {
                    "range": [
                        137,
                        138
                    ],
                    "text": ""
                }
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 1,
        "fixableWarningCount": 0,
        "source": "import * as boMapping from \"./bo_namespace_map.json\";\n\n\n  export function getboNamespaceMappingData(boName: string, oldNameSpace: string) : any {\n      console.log(boName + \" \" + oldNameSpace);\n     \n        for(const prop in boMapping){\n            console.log(boMapping[prop]);\n            if(boMapping[prop].boName === boName && boMapping[prop].oldNameSpace === oldNameSpace){\n                console.log(\"Found\");\n                return boMapping[prop];\n            }\n        }\n        return \"Matching BO and OldNamespace Not found.\"\n        // var x = Object.entries(boMapping);\n        // x.forEach(ele => {\n        // if(ele[1].boName === boName && ele[1].oldNameSpace === oldNameSpace){\n        //         console.log(\"Found\");\n        //         return JSON.stringify(ele[1]);\n        //     }else{\n        //         return \"Matching BO and OldNamespace Not found.\"\n        //     }\n        // });\n    }\n\n    export function getboNamespaceMappingDataNew(boName: string, oldNameSpace: string): any {\n        if (boName && oldNameSpace && boMapping) {\n            for (const bo in boMapping) {\n                if (boMapping[bo].boName === boName && boMapping[bo].oldNameSpace === oldNameSpace) {\n                    return boMapping[bo];\n                }\n            }\n            return \"Matching BO and OldNamespace Not found.\";\n        }\n        else if ((boName == null || boName === \"\") && oldNameSpace && boMapping) {\n            for (const bo in boMapping) {\n                if (boMapping[bo].oldNameSpace === oldNameSpace) {\n                    return boMapping[bo];\n                }\n            }\n            return \"Matching BO and OldNamespace Not found.\";\n        }\n        else {\n            return \"Matching BO and OldNamespace Not found.\";\n        }\n    }\n\n"
    }
]